"""Type stubs for numpy."""

from typing import (
    Union,
    List,
    Tuple,
    Optional,
    Type,
    TypeVar,
    overload,
)

DType = TypeVar("DType")

class ndarray:
    def __init__(self, shape: Tuple[int, ...], dtype: Optional[Type[object]] = None) -> None: ...
    
    @property
    def shape(self) -> Tuple[int, ...]: ...
    
    @property
    def dtype(self) -> object: ...
    
    def __getitem__(self, key: Union[int, slice, Tuple[Union[int, slice], ...]]) -> Union["ndarray", object]: ...
    def __setitem__(self, key: Union[int, slice, Tuple[Union[int, slice], ...]], value: object) -> None: ...
    
    def tolist(self) -> List[object]: ...
    def sum(self, axis: Optional[Union[int, Tuple[int, ...]]] = None) -> Union["ndarray", object]: ...
    def mean(self, axis: Optional[Union[int, Tuple[int, ...]]] = None) -> Union["ndarray", object]: ...
    def max(self, axis: Optional[Union[int, Tuple[int, ...]]] = None) -> Union["ndarray", object]: ...
    def min(self, axis: Optional[Union[int, Tuple[int, ...]]] = None) -> Union["ndarray", object]: ...

def array(object: object, dtype: Optional[Type[object]] = None) -> ndarray: ...
def zeros(shape: Union[int, Tuple[int, ...]], dtype: Optional[Type[object]] = None) -> ndarray: ...
def ones(shape: Union[int, Tuple[int, ...]], dtype: Optional[Type[object]] = None) -> ndarray: ...
def empty(shape: Union[int, Tuple[int, ...]], dtype: Optional[Type[object]] = None) -> ndarray: ...

def arange(start: Union[int, float], stop: Optional[Union[int, float]] = None, step: Union[int, float] = 1, dtype: Optional[Type[object]] = None) -> ndarray: ...

def concatenate(arrays: List[ndarray], axis: Optional[int] = None) -> ndarray: ...
def stack(arrays: List[ndarray], axis: int = 0) -> ndarray: ...

# Data types
int32: Type[object]
int64: Type[object]
float32: Type[object]
float64: Type[object]
bool_: Type[object]

# Common aliases
int_: Type[object]
float_: Type[object]