"""Type stubs for playwright.async_api module."""

from typing import AsyncIterator, Awaitable, Callable, Dict, Optional, Union, overload

from typing_extensions import Literal

JsonValue = Union[
    dict[str, "JsonValue"], list["JsonValue"], str, int, float, bool, None
]

class Element:
    async def text_content(self) -> Optional[str]: ...
    async def count(self) -> int: ...

class Locator:
    async def text_content(self) -> Optional[str]: ...
    async def inner_html(self) -> str: ...
    async def inner_text(self) -> str: ...
    async def count(self) -> int: ...
    async def wait_for(self, state: str = "visible", **options: object) -> None: ...
    async def is_enabled(self) -> bool: ...
    async def is_visible(self) -> bool: ...
    async def click(self, **options: object) -> None: ...
    async def get_attribute(self, name: str) -> Optional[str]: ...
    @property
    def first(self) -> "Locator": ...
    def nth(self, index: int) -> "Locator": ...

class APIRequest:
    async def get(self, url: str, **options: object) -> "APIResponse": ...
    async def post(self, url: str, **options: object) -> "APIResponse": ...

class APIResponse:
    @property
    def ok(self) -> bool: ...
    @property
    def status(self) -> int: ...
    @property
    def headers(self) -> dict[str, str]: ...
    async def json(self) -> dict[str, JsonValue]: ...
    async def text(self) -> str: ...

class Page:
    @property
    def request(self) -> APIRequest: ...
    @property
    def keyboard(self) -> "Keyboard": ...
    @property
    def mouse(self) -> "Mouse": ...
    async def goto(self, url: str, **options: object) -> "Response": ...
    async def wait_for_selector(self, selector: str, **options: object) -> Element: ...
    async def wait_for_load_state(
        self, state: str = "load", **options: object
    ) -> None: ...
    async def click(self, selector: str, **options: object) -> None: ...
    async def fill(self, selector: str, value: str, **options: object) -> None: ...
    async def evaluate(self, expression: str, arg: object = None) -> JsonValue: ...
    async def route(
        self, url: str, handler: Callable[["Route"], Awaitable[None]]
    ) -> None: ...
    async def unroute(self, url: str) -> None: ...
    async def close(self) -> None: ...
    async def wait_for_timeout(self, timeout: float) -> None: ...
    async def text_content(self, selector: str) -> Optional[str]: ...
    async def title(self) -> str: ...
    async def reload(self, **options: object) -> None: ...
    async def expose_function(
        self, name: str, callback: Callable[[object], object]
    ) -> None: ...
    def locator(self, selector: str) -> Locator: ...
    def set_default_timeout(self, timeout: float) -> None: ...
    def set_default_navigation_timeout(self, timeout: float) -> None: ...
    async def content(self) -> str: ...
    async def go_back(self, **options: object) -> Optional["Response"]: ...
    async def go_forward(self, **options: object) -> Optional["Response"]: ...
    async def bring_to_front(self) -> None: ...
    async def screenshot(self, **options: object) -> bytes: ...
    @overload
    def on(
        self, event: Literal["console"], handler: Callable[[ConsoleMessage], object]
    ) -> None: ...
    @overload
    def on(
        self, event: Literal["websocket"], handler: Callable[["WebSocket"], object]
    ) -> None: ...
    @overload
    def on(
        self, event: Literal["request"], handler: Callable[[Request], object]
    ) -> None: ...
    @overload
    def on(
        self, event: Literal["response"], handler: Callable[[Response], object]
    ) -> None: ...
    @overload
    def on(self, event: str, handler: Callable[[object], object]) -> None: ...
    @property
    def url(self) -> str: ...

class Response:
    """Page response object."""

    @property
    def url(self) -> str: ...
    @property
    def status(self) -> int: ...

class Browser:
    async def new_context(self, **options: object) -> "BrowserContext": ...
    async def new_page(self, **options: object) -> Page: ...
    async def close(self) -> None: ...
    @property
    def contexts(self) -> list["BrowserContext"]: ...
    @property
    def browser_type(self) -> "BrowserType": ...

class BrowserContext:
    async def new_page(self) -> Page: ...
    async def close(self) -> None: ...
    async def route(
        self, url: str, handler: Callable[["Route"], Awaitable[None]]
    ) -> None: ...
    async def unroute(self, url: str) -> None: ...
    @property
    def pages(self) -> list[Page]: ...

class BrowserType:
    async def launch(self, **options: object) -> Browser: ...
    @property
    def name(self) -> str: ...

    # Additional properties/methods for dynamic access
    def __getattr__(self, name: str) -> object: ...

class Request:
    @property
    def url(self) -> str: ...

class Route:
    @property
    def request(self) -> Request: ...
    async def abort(self, error_code: Optional[str] = None) -> None: ...
    async def continue_(self, **overrides: object) -> None: ...
    async def fulfill(self, **options: object) -> None: ...

class ConsoleMessage:
    @property
    def type(self) -> str: ...
    @property
    def text(self) -> str: ...

class WebSocket:
    def on(self, event: str, handler: Callable[[object], object]) -> None: ...

class Keyboard:
    async def press(self, key: str, **options: object) -> None: ...
    async def type(self, text: str, **options: object) -> None: ...
    async def down(self, key: str) -> None: ...
    async def up(self, key: str) -> None: ...

class Mouse:
    async def click(self, x: float, y: float, **options: object) -> None: ...
    async def move(self, x: float, y: float, **options: object) -> None: ...
    async def down(self, **options: object) -> None: ...
    async def up(self, **options: object) -> None: ...

class Playwright:
    @property
    def chromium(self) -> BrowserType: ...
    @property
    def firefox(self) -> BrowserType: ...
    @property
    def webkit(self) -> BrowserType: ...

class PlaywrightContextManager:
    async def __aenter__(self) -> Playwright: ...
    async def __aexit__(
        self, exc_type: object, exc_val: object, exc_tb: object
    ) -> None: ...

def async_playwright() -> PlaywrightContextManager: ...
def expect(value: object) -> "PageAssertions": ...

class PageAssertions:
    async def to_have_text(
        self, expected: Union[str, list[str]], **options: object
    ) -> None: ...
    async def not_to_have_text(
        self, expected: Union[str, list[str]], **options: object
    ) -> None: ...
    async def to_be_visible(self, **options: object) -> None: ...
    async def not_to_be_visible(self, **options: object) -> None: ...
    async def to_be_disabled(self, **options: object) -> None: ...
    async def to_be_enabled(self, **options: object) -> None: ...
    async def to_have_class(self, expected: str, **options: object) -> None: ...
    async def to_have_url(self, expected: str, **options: object) -> None: ...
