{
  "version": "1.0",
  "description": "Machine-readable registry of Claude Code agents for MCTS project",
  "updated": "2025-08-20",
  "agents": {
    "formatter-black": {
      "name": "Black Code Formatter",
      "file": "formatter-black.md",
      "category": "quality",
      "priority": 1,
      "commands": ["docker compose exec mcts poetry run black .", "docker compose exec mcts poetry run black --check ."],
      "container_execution": true,
      "triggers": ["python_files", "format_errors"],
      "environment_vars": ["MCTS_FORMAT_CMD", "MCTS_BLACK_TIMEOUT"],
      "description": "Python code formatting with Black PEP 8 compliance",
      "dependencies": ["black"],
      "exit_codes": {
        "0": "success",
        "1": "format_required",
        "123": "internal_error"
      }
    },
    "mypy-type-checker": {
      "name": "MyPy Type Checker",
      "file": "mypy-type-checker.md", 
      "category": "quality",
      "priority": 2,
      "commands": ["docker compose exec mcts poetry run mypy --strict ."],
      "container_execution": true,
      "triggers": ["python_files", "type_errors"],
      "environment_vars": ["MCTS_TYPECHECK_CMD", "MCTS_MYPY_TIMEOUT", "MYPY_CONFIG_FILE"],
      "description": "Comprehensive static type checking with zero tolerance policy",
      "dependencies": ["mypy"],
      "policies": {
        "zero_tolerance": true,
        "single_continuation": true,
        "no_any_types": true,
        "no_cast_usage": true,
        "no_type_ignore": true,
        "custom_stubs_required": true
      },
      "exit_codes": {
        "0": "no_errors",
        "1": "type_errors_found",
        "2": "fatal_error"
      }
    },
    "builder-docker": {
      "name": "Docker Builder",
      "file": "builder-docker.md",
      "category": "build",
      "priority": 3,
      "commands": ["docker compose build"],
      "triggers": ["build_surface_files", "build_errors"],
      "environment_vars": ["MCTS_BUILD_CMD", "DOCKER_BUILDKIT"],
      "description": "Docker container builds for development and CI",
      "dependencies": ["docker"],
      "build_surface": [
        "Dockerfile",
        "docker-compose.yaml",
        "docker-compose.yml",
        "requirements.txt",
        "pyproject.toml",
        "setup.py",
        "setup.cfg",
        "poetry.lock",
        "Pipfile",
        "Pipfile.lock",
        "backend/core/**",
        "docker/**"
      ],
      "exit_codes": {
        "0": "build_success",
        "1": "build_failed",
        "125": "docker_daemon_error"
      }
    },
    "tester-unified": {
      "name": "Unified Test Suite Runner",
      "file": "tester-unified.md",
      "category": "validation",
      "priority": 4,
      "commands": ["docker compose exec mcts poetry run test-all"],
      "container_execution": true,
      "triggers": ["python_files", "frontend_files", "test_failures"],
      "environment_vars": ["MCTS_TEST_CMD", "MCTS_PYTEST_TIMEOUT", "PYTEST_ARGS"],
      "description": "Complete unified test suite (Python, Frontend, E2E) execution and validation",
      "dependencies": ["pytest", "vitest", "playwright"],
      "test_types": [
        "unit_core",
        "unit_api",
        "integration",
        "utils_fixtures",
        "benchmarks",
        "frontend",
        "e2e"
      ],
      "exit_codes": {
        "0": "all_tests_passed",
        "1": "tests_failed", 
        "2": "test_execution_interrupted",
        "3": "internal_error",
        "4": "pytest_usage_error",
        "5": "no_tests_collected"
      }
    },
    "no-git-commits": {
      "name": "No Git Commits Policy",
      "file": "no-git-commits.md",
      "category": "policy",
      "priority": 0,
      "commands": [],
      "triggers": ["always"],
      "environment_vars": [],
      "description": "Ensures agents never make git commits automatically",
      "dependencies": [],
      "policies": {
        "no_git_commits": true,
        "user_controls_vcs": true
      }
    },
    "builder-cpu": {
      "name": "CPU-Only Docker Builder",
      "file": "builder-cpu.md",
      "category": "build",
      "priority": 3,
      "commands": ["docker build -f docker/Dockerfile --build-arg VARIANT=cpu --build-arg BASE_IMAGE=ubuntu:22.04 -t mcts-cpu ."],
      "triggers": ["cpu_build_required"],
      "environment_vars": ["MCTS_CPU_BUILD_CMD"],
      "description": "CPU-only Docker builds without GPU dependencies",
      "dependencies": ["docker"],
      "target_architecture": ["amd64", "arm64"],
      "exit_codes": {
        "0": "build_success",
        "1": "build_failed"
      }
    },
    "builder-gpu": {
      "name": "GPU-Enabled Docker Builder", 
      "file": "builder-gpu.md",
      "category": "build",
      "priority": 3,
      "commands": ["docker compose -f docker-compose.yaml -f docker-compose.gpu.yaml build"],
      "triggers": ["gpu_build_required"],
      "environment_vars": ["MCTS_GPU_BUILD_CMD"],
      "description": "GPU-enabled Docker builds with CUDA/OpenCL support",
      "dependencies": ["docker", "docker-compose", "nvidia-docker"],
      "target_architecture": ["amd64"],
      "gpu_requirements": {
        "nvidia_runtime": true,
        "cuda_compatible": true
      },
      "exit_codes": {
        "0": "build_success",
        "1": "build_failed",
        "125": "docker_daemon_error"
      }
    },
    "doc-consistency-checker": {
      "name": "Documentation Consistency Checker",
      "file": "doc-consistency-checker.md",
      "category": "quality",
      "priority": 5,
      "commands": [],
      "triggers": ["doc_files", "interface_changes"],
      "environment_vars": [],
      "description": "Ensures documentation stays consistent with code changes",
      "dependencies": [],
      "tools": ["Read", "Bash", "Grep", "Glob"],
      "read_only": true,
      "exit_codes": {
        "0": "docs_consistent",
        "1": "docs_need_update"
      }
    },
    "test-writer": {
      "name": "Test Writer",
      "file": "test-writer.md",
      "category": "validation",
      "priority": 3,
      "commands": ["docker compose exec mcts poetry run pytest tests/ --cov=. --cov-report=term-missing"],
      "container_execution": true,
      "triggers": ["new_code", "modified_functions"],
      "environment_vars": ["PYTEST_ARGS", "COVERAGE_THRESHOLD"],
      "description": "Generate and update unit tests for new or modified code",
      "dependencies": ["pytest", "pytest-cov"],
      "tools": ["Read", "Write", "Edit", "MultiEdit", "Bash"],
      "exit_codes": {
        "0": "tests_generated_successfully",
        "1": "test_generation_failed",
        "2": "coverage_below_threshold"
      }
    },
    "code-reviewer": {
      "name": "Code Reviewer", 
      "file": "code-reviewer.md",
      "category": "quality",
      "priority": 6,
      "commands": [],
      "triggers": ["code_changes", "pull_requests"],
      "environment_vars": ["REVIEW_SEVERITY", "REVIEW_FOCUS", "REVIEW_DIFF_BASE"],
      "description": "Automated code review for correctness, style, security, and maintainability",
      "dependencies": [],
      "tools": ["Read", "Bash", "Grep", "Glob"],
      "read_only": true,
      "exit_codes": {
        "0": "approved",
        "1": "minor_issues",
        "6": "critical_issues_block_merge"
      }
    }
  },
  "pipeline": {
    "stages": [
      {
        "name": "format",
        "agent": "formatter-black",
        "required": true,
        "condition": "python_files_changed"
      },
      {
        "name": "typecheck", 
        "agent": "mypy-type-checker",
        "required": true,
        "condition": "python_files_changed"
      },
      {
        "name": "test_generation",
        "agent": "test-writer",
        "required": false,
        "condition": "new_code_detected"
      },
      {
        "name": "build",
        "agent": "builder-docker",
        "required": false,
        "condition": "build_surface_changed"
      },
      {
        "name": "test",
        "agent": "tester-unified", 
        "required": true,
        "condition": "python_files_changed"
      },
      {
        "name": "coverage",
        "agent": "tester-unified",
        "required": false,
        "condition": "coverage_check_enabled"
      },
      {
        "name": "review",
        "agent": "code-reviewer",
        "required": false,
        "condition": "code_changes_present"
      }
    ],
    "exit_codes": {
      "0": "all_stages_passed",
      "1": "format_stage_failed",
      "2": "typecheck_stage_failed", 
      "3": "build_stage_failed",
      "4": "test_stage_failed",
      "5": "tool_not_found"
    }
  },
  "triggers": {
    "python_files": [".py", ".pyi"],
    "build_surface_files": [
      "Dockerfile",
      "docker-compose.yaml", 
      "docker-compose.yml",
      "requirements.txt",
      "pyproject.toml",
      "setup.py",
      "setup.cfg",
      "poetry.lock",
      "Pipfile",
      "Pipfile.lock"
    ],
    "build_surface_dirs": ["backend/core", "docker"]
  },
  "environment": {
    "hook_file": ".claude/hooks/quality-gate.py",
    "settings_file": ".claude/settings.json",
    "agent_directory": ".claude/agents",
    "variables": {
      "MCTS_FORMAT_CMD": "docker compose exec mcts poetry run black .",
      "MCTS_TYPECHECK_CMD": "docker compose exec mcts poetry run mypy --strict .",
      "MCTS_BUILD_CMD": "docker compose build",
      "MCTS_TEST_CMD": "docker compose exec mcts poetry run test-all",
      "MCTS_BLACK_TIMEOUT": "60",
      "MCTS_MYPY_TIMEOUT": "300",
      "MCTS_PYTEST_TIMEOUT": "120",
      "MCTS_TEST_SCOPE": "fast",
      "MCTS_SKIP_BUILD": "false",
      "MCTS_SKIP_TESTS": "false", 
      "MCTS_VERBOSE": "false",
      "MCTS_FAIL_FAST": "true"
    }
  },
  "metadata": {
    "repository": "MCTS Monte Carlo Tree Search Implementation",
    "languages": ["Python", "C++"],
    "frameworks": ["FastAPI", "pytest", "Docker"],
    "quality_standards": {
      "formatting": "Black (PEP 8)",
      "type_checking": "MyPy strict mode",
      "testing": "pytest with comprehensive coverage",
      "containerization": "Docker multi-stage builds"
    }
  }
}