[pytest]
# Pytest configuration for comprehensive testing
minversion = 7.0
addopts = 
    -ra
    -q
    --strict-markers
    --strict-config
    --tb=short
    --disable-warnings
    
testpaths = tests
asyncio_mode = auto
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test markers for categorization and filtering
markers =
    # Test layers
    unit: Unit tests - isolated component testing
    integration: Integration tests - real service interactions  
    e2e: End-to-end tests - full browser automation
    
    # Test categories
    slow: Tests that take more than 5 seconds
    performance: Performance and benchmark tests
    stress: Stress tests with high resource usage
    quarantine: Quarantined tests due to flakiness
    benchmark: Benchmark tests (run with --benchmark-only)
    edge_cases: Edge case and boundary condition tests
    
    # Component markers
    python: Tests that test pure Python functionality
    cpp: Tests that test C++ functionality via Python bindings
    mcts: Tests related to MCTS algorithm
    board: Tests related to board functionality
    display: Tests related to display/visualization
    websocket: WebSocket functionality tests
    api: FastAPI server tests
    cors: CORS configuration tests
    connection: Connection handling and recovery tests
    frontend: Frontend/UI tests
    backend: Backend/API tests
    game_manager: Tests related to game management
    models: Tests related to Pydantic models
    endpoints: Tests for API endpoints
    
    # Test characteristics
    flaky_on_ci: Tests that are flaky specifically on CI
    requires_docker: Tests that require Docker services
    requires_network: Tests that require network access

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Playwright warnings
    ignore:.*Playwright.*:UserWarning
    # WebSocket warnings
    ignore:.*websockets.*:UserWarning
    # Asyncio warnings
    ignore:.*coroutine.*:RuntimeWarning


# Coverage configuration (if using pytest-cov)
[coverage:run]
source = backend, frontend/src
omit = 
    tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod