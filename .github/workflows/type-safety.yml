name: Type Safety Enforcement

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'tools/check_type_safety.py'

concurrency:
  group: type-safety-${{ github.ref }}
  cancel-in-progress: true

jobs:
  type-safety-check:
    name: Type Safety Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          
      - name: Cache Poetry venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-type-safety-${{ runner.os }}-py3.12-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            venv-type-safety-${{ runner.os }}-py3.12-
            
      - name: Install dependencies
        run: poetry install --with dev
        
      - name: Run enhanced type safety check
        run: |
          echo "::group::Type Safety Check"
          poetry run python tools/check_type_safety.py --verbose
          echo "::endgroup::"

  mypy-strict-check:
    name: MyPy Strict Type Check
    runs-on: ubuntu-latest  
    timeout-minutes: 15
    needs: type-safety-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          
      - name: Cache Poetry venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-mypy-${{ runner.os }}-py3.12-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            venv-mypy-${{ runner.os }}-py3.12-
            
      - name: Install dependencies
        run: poetry install --with dev
        
      - name: Run MyPy strict type checking
        run: |
          echo "::group::MyPy Strict Check"
          poetry run mypy --strict .
          echo "::endgroup::"

  summary:
    name: Type Safety Summary
    runs-on: ubuntu-latest
    needs: [type-safety-check, mypy-strict-check]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## Type Safety Enforcement Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.type-safety-check.result }}" == "success" ]; then
            echo "✅ **Type Safety Check**: PASSED - No Any, cast, or type: ignore violations" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Type Safety Check**: FAILED - Type violations detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.mypy-strict-check.result }}" == "success" ]; then
            echo "✅ **MyPy Strict Check**: PASSED - All types verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **MyPy Strict Check**: FAILED - Type errors found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Fix Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Fix common type violations automatically:" >> $GITHUB_STEP_SUMMARY
          echo "poetry run python tools/check_type_safety.py --fix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run type checks:" >> $GITHUB_STEP_SUMMARY
          echo "poetry run mypy --strict ." >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY