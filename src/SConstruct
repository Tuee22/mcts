#!python
from sys import prefix
from shutil import copyfile
project_name = "_corridors_mcts"
boost_libs = ['boost_python310', 'boost_numpy310']
python_include_path = [prefix + '/include/python3.10']
lib_path = []

# get argument flags
test = bool(ARGUMENTS.get('test',0))
debug = bool(ARGUMENTS.get('debug', 0))
profile = bool(ARGUMENTS.get('profile', 0))
sanitize = bool(ARGUMENTS.get('sanitize', 0))

# determine which files to build based on test flag
all_source_files=Glob('*.cpp')
exclude_from_test=[project_name+'.cpp','corridors_threaded_api.cpp']
exclude_from_prod=['test.cpp']
exclude = exclude_from_test if test else exclude_from_prod
source_files=[f for f in all_source_files if str(f) not in exclude]

# don't need python libs if we're testing in C++
libs = [] if test else boost_libs
include_path = [] if test else python_include_path

# determine compiler and linker flags
compiler_always_flags=['-Wno-deprecated-declarations',f'-flto={num_parallel_jobs}']
linker_always_flags=['-fuse-ld=gold']
optimization_maybe_flag=[] if debug else ['-Ofast','-flto']
debug_profile_maybe_flag=['-pg'] if profile else ['-g'] if test else []
fsanitize_maybe_flag=['-fsanitize=address'] if sanitize else []

# determine env dict
flags={
    'CCFLAGS': compiler_always_flags + optimization_maybe_flag + debug_profile_maybe_flag + fsanitize_maybe_flag,
    'LINKFLAGS':linker_always_flags + debug_profile_maybe_flag + fsanitize_maybe_flag,
}
print('Passing the following compiler and linker flags:',flags)

env=Environment(**flags)
# build an executable if we're testing, otherwise build 
build_method=env.Program if test else env.SharedLibrary

build_method(
    target = project_name,
    SHLIBPREFIX='',
    source = source_files,
    LIBS=libs,
    LIBPATH=lib_path,
    CPPPATH=include_path,
    RPATH=lib_path,
)