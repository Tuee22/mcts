[tool.poetry]
name = "mcts"
version = "0.1.0"
description = "Monte Carlo Tree Search implementation with C++ backend"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "backend"}, {include = "corridors", from = "backend/python"}]


[tool.poetry.dependencies]
python = ">=3.12,<4.0"

# Build dependencies
pybind11 = ">=2.11.0,<3.0"
scons = ">=4.6.0,<5.0"
setuptools = ">=65.0.0"

# Core functionality
numpy = ">=1.26.3,<2.0"
click = ">=8.1.7,<9.0"
requests = ">=2.31.0,<3.0"

# API dependencies
fastapi = ">=0.109.0,<1.0"
uvicorn = {extras = ["standard"], version = ">=0.25.0,<1.0"}
pydantic = ">=2.5.3,<3.0"
websockets = ">=12.0,<13.0"
httpx = ">=0.25.2,<1.0"

[tool.poetry.group.dev.dependencies]
# Code quality tools
mypy = ">=1.8.0,<2.0"
black = ">=23.7.0,<24.0"
isort = ">=5.12.0,<6.0"

# Testing framework
pytest = ">=7.4.0,<8.0"
pytest-benchmark = ">=4.0.0,<5.0"
pytest-asyncio = ">=0.21.0,<1.0"

# E2E testing
playwright = ">=1.40.0,<2.0"

# Test utilities (used in test files)
psutil = ">=5.9.7,<6.0"
types-requests = "^2.32.4.20250809"
types-psutil = "^7.0.0.20250822"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# Test runner commands
test-runner = "tests.utils.test_runner:main"

# API servers - now primary entrypoints
api-server = "backend.api.server:main"
api-dev = "backend.api.server:dev"

# Unified test runner - runs ALL tests (Python + Frontend + E2E)
test-all = "tests.utils.run_unified_tests:main"

# Granular test runners by test category
test-unit = "tests.utils.subset_runners:run_unit_tests"
test-integration = "tests.utils.subset_runners:run_integration_tests"
test-benchmarks = "tests.utils.subset_runners:run_benchmark_tests"
test-python = "tests.utils.subset_runners:run_python_tests"
test-frontend = "tests.utils.run_frontend_tests:main"
test-e2e = "tests.utils.subset_runners:run_e2e_tests"

# Convenience runners for speed
test-fast = "tests.utils.subset_runners:run_fast_tests"
test-quick = "tests.utils.subset_runners:run_quick_tests"

# Type safety checker
check-type-safety = "tools.check_type_safety:main"

# Setup tools
setup-playwright = "tools.setup_playwright:main"

# Server aliases for convenience - now primary entrypoints  
server = "backend.api.server:main"
server-dev = "backend.api.server:dev"


[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'  # Explicitly include both .py and .pyi files
extend-exclude = '''
/(
    frontend/node_modules
  | frontend/build  
  | backend/core/build
  | \.git
  | \.venv
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "e2e: marks tests as end-to-end tests using Playwright",
    "cpp: marks tests that test C++ functionality via Python bindings",
    "python: marks tests that test pure Python functionality",
    "mcts: marks tests related to MCTS algorithm",
    "board: marks tests related to board functionality",
    "display: marks tests related to display/visualization",
    "performance: marks performance and stress tests",
    "edge_cases: marks edge case and boundary condition tests",
    "benchmark: marks tests as benchmarks (run with --benchmark-only)",
    "stress: marks stress tests with high resource usage",
    "api: marks tests related to the FastAPI server",
    "websocket: marks tests related to WebSocket functionality",
    "game_manager: marks tests related to game management",
    "models: marks tests related to Pydantic models",
    "endpoints: marks tests for API endpoints",
    "cors: marks tests related to CORS configuration",
    "connection: marks tests for connection handling and recovery"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.mypy]
python_version = "3.12"
# Maximum type safety configuration with zero tolerance policy
# Core strictness settings
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
strict_concatenate = true

# Function definition requirements
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true

# Any type restrictions - zero tolerance
disallow_any_explicit = true
disallow_any_expr = false  # Too restrictive for ecosystem compatibility
disallow_any_decorated = false  # Would break FastAPI decorators
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true

# Import and module handling
ignore_missing_imports = false  # We have comprehensive stubs
follow_imports = "normal"
strict_optional = true
no_implicit_optional = true

# Error reporting and display
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
color_output = true
error_summary = true

# File coverage - check everything
files = ["backend/", "tests/", "tools/"]
mypy_path = ["stubs", "backend/python"]
explicit_package_bases = true
namespace_packages = true

# Exclude build-generated files and directories
exclude = [
    "frontend/node_modules/",
    "frontend/build/",
    "backend/core/build/",
    "build/",
    "dist/",
    ".venv/",
    "venv/",
]

# Performance and caching
incremental = true
cache_dir = ".mypy_cache"
sqlite_cache = true

# Additional strictness for our codebase
no_implicit_reexport = true
disallow_redefinition = true

# No per-file overrides - we're going for 100% type safety


[tool.poetry.extras]
api = ["fastapi", "uvicorn", "websockets", "httpx"]

