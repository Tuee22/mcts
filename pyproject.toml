[tool.poetry]
name = "mcts"
version = "0.1.0"
description = "Monte Carlo Tree Search implementation with C++ backend"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "backend"}, {include = "corridors", from = "backend/python"}]


[tool.poetry.dependencies]
python = ">=3.12,<4.0"

# Build dependencies
pybind11 = ">=2.11.0,<3.0"
scons = ">=4.6.0,<5.0"
setuptools = ">=65.0.0"

# Core functionality
numpy = ">=1.26.3,<2.0"
click = ">=8.1.7,<9.0"
requests = ">=2.31.0,<3.0"

# API dependencies
fastapi = ">=0.109.0,<1.0"
uvicorn = {extras = ["standard"], version = ">=0.25.0,<1.0"}
pydantic = ">=2.5.3,<3.0"
websockets = ">=12.0,<13.0"
httpx = ">=0.25.2,<1.0"

[tool.poetry.group.dev.dependencies]
# Code quality tools
mypy = ">=1.8.0,<2.0"
black = ">=23.7.0,<24.0"
isort = ">=5.12.0,<6.0"

# Testing framework
pytest = ">=7.4.0,<8.0"
pytest-benchmark = ">=4.0.0,<5.0"
pytest-asyncio = ">=0.21.0,<1.0"

# E2E testing
playwright = ">=1.40.0,<2.0"

# Test utilities (used in test files)
psutil = ">=5.9.7,<6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# Test runner commands
test-runner = "tests.utils.test_runner:main"

# API servers
api-server = "backend.api.server:main"
api-dev = "backend.api.server:dev"

# Unified test runner - runs ALL tests (Python + Frontend + E2E)
test-all = "tests.utils.run_unified_tests:main"

# Granular test runners by test category
test-unit = "tests.utils.test_subsets:run_unit_tests"
test-integration = "tests.utils.test_subsets:run_integration_tests"
test-benchmarks = "tests.utils.test_subsets:run_benchmark_tests"
test-python = "tests.utils.test_subsets:run_python_tests"
test-frontend = "tests.utils.test_subsets:run_frontend_tests"
test-e2e = "tests.utils.test_subsets:run_e2e_tests"

# Convenience runners for speed
test-fast = "tests.utils.test_subsets:run_fast_tests"
test-quick = "tests.utils.test_subsets:run_quick_tests"

# Type safety checker
check-type-safety = "tools.check_type_safety:main"

# Setup tools
setup-playwright = "tools.setup_playwright:main"

# Code quality tools
format = "black ."
sort-imports = "isort ."
lint = "flake8 ."
typecheck = "mypy --strict ."
# quality-check = "tools.run_quality_checks:main"  # Disabled - file doesn't exist

# Debug tools (run directly with: poetry run python tools/debug/script_name.py)
# debug-terminal = "tools.debug.debug_terminal:main"  # Disabled - no main() function
# debug-board = "tools.debug.debug_board_state:main"   # Disabled - no main() function

# Server aliases for convenience
server = "backend.api.server:main"
server-dev = "backend.api.server:dev"


[tool.black]
line-length = 88
target-version = ['py312']
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "e2e: marks tests as end-to-end tests using Playwright",
    "cpp: marks tests that test C++ functionality via Python bindings",
    "python: marks tests that test pure Python functionality",
    "mcts: marks tests related to MCTS algorithm",
    "board: marks tests related to board functionality",
    "display: marks tests related to display/visualization",
    "performance: marks performance and stress tests",
    "edge_cases: marks edge case and boundary condition tests",
    "benchmark: marks tests as benchmarks (run with --benchmark-only)",
    "stress: marks stress tests with high resource usage",
    "api: marks tests related to the FastAPI server",
    "websocket: marks tests related to WebSocket functionality",
    "game_manager: marks tests related to game management",
    "models: marks tests related to Pydantic models",
    "endpoints: marks tests for API endpoints",
    "cors: marks tests related to CORS configuration",
    "connection: marks tests for connection handling and recovery"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.mypy]
python_version = "3.12"
# Final optimized configuration for maximum achievable type safety
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
# Core achievements: strong typing where possible
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
# Flexible for ecosystem compatibility
disallow_untyped_calls = false
disallow_untyped_decorators = false
# Key achievement: no explicit Any usage in source code
disallow_any_explicit = true
# Allow implicit Any where needed for ecosystem compatibility
warn_return_any = false
disallow_any_generics = false
disallow_any_decorated = false
disallow_any_unimported = false
disallow_subclassing_any = false
# Focus on our code, be permissive with ecosystem
ignore_missing_imports = false  # We have stubs
follow_imports = "normal"
show_error_context = true
show_column_numbers = true
pretty = true
# Check all Python files in the project - comprehensive coverage
files = ["backend/", "tests/", "tools/"]
# Check corridors as a top-level module  
mypy_path = ["stubs", "backend/python"]
# Resolve module path conflicts
explicit_package_bases = true
namespace_packages = true
# Display options
color_output = true
error_summary = true
# Reports disabled for now - can be enabled with lxml installed
# any_exprs_report = "mypy-reports"
# html_report = "mypy-reports/html"
# linecount_report = "mypy-reports/linecount"
# linecoverage_report = "mypy-reports/linecoverage"
# txt_report = "mypy-reports/txt"

# No per-file overrides - we're going for 100% type safety


[tool.poetry.extras]
api = ["fastapi", "uvicorn", "websockets", "httpx"]

