[tool.poetry]
name = "mcts"
version = "0.1.0"
description = "Monte Carlo Tree Search implementation with C++ backend"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "backend"}, {include = "corridors", from = "backend/python"}]


[tool.poetry.dependencies]
python = ">=3.12,<4.0"
pybind11 = ">=2.11.0,<3.0"
numpy = ">=1.26.3,<2.0"
scons = ">=4.6.0,<5.0"
setuptools = ">=65.0.0"

# Core functionality
pandas = ">=2.1.4,<3.0"
scipy = ">=1.11.4,<2.0"
psutil = ">=5.9.7,<6.0"
tqdm = ">=4.66.1,<5.0"
click = ">=8.1.7,<9.0"
requests = ">=2.31.0,<3.0"
aiohttp = ">=3.9.1,<4.0"
pyyaml = ">=6.0.1,<7.0"

# API dependencies
fastapi = ">=0.109.0,<1.0"
uvicorn = {extras = ["standard"], version = ">=0.25.0,<1.0"}
pydantic = ">=2.5.3,<3.0"
websockets = ">=12.0,<13.0"
python-multipart = ">=0.0.6,<1.0"
httpx = ">=0.25.2,<1.0"

[tool.poetry.group.dev.dependencies]
mypy = ">=1.8.0,<2.0"
pandas-stubs = ">=2.1.4.231227,<3.0"
types-python-dateutil = ">=2.8.19.14,<3.0"
types-pytz = ">=2023.3.1.1,<2024.0"
pytest = ">=7.4.0,<8.0"
pytest-benchmark = ">=4.0.0,<5.0"
pytest-asyncio = ">=0.21.0,<1.0"
pytest-mock = ">=3.11.0,<4.0"
pytest-cov = ">=4.1.0,<5.0"
playwright = ">=1.40.0,<2.0"
pytest-playwright = ">=0.4.3,<1.0"
black = ">=23.7.0,<24.0"
isort = ">=5.12.0,<6.0"
flake8 = ">=6.0.0,<7.0"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
torch = ">=2.1.2,<3.0"
torchvision = ">=0.16.2,<1.0"
pytorch-lightning = ">=2.1.3,<3.0"
numba = ">=0.58.1,<1.0"

[tool.poetry.group.data]
optional = true

[tool.poetry.group.data.dependencies]
dask = {extras = ["complete"], version = ">=2023.12.1,<2024.0"}
distributed = ">=2023.12.1,<2024.0"
tables = ">=3.9.2,<4.0"
pyarrow = ">=14.0.2,<15.0"
s3fs = ">=2023.12.2,<2024.0"

[tool.poetry.group.viz]
optional = true

[tool.poetry.group.viz.dependencies]
plotly = ">=5.18.0,<6.0"
dash = ">=2.14.2,<3.0"
jupyter-dash = ">=0.4.2,<1.0"
jupyterlab = ">=3.6.6,<4.0"
ipywidgets = ">=8.1.1,<9.0"
bokeh = ">=3.3.2,<4.0"
matplotlib-inline = ">=0.1.6,<1.0"
sympy = ">=1.12,<2.0"
networkx = ">=3.2.1,<4.0"
pillow = ">=10.2.0,<11.0"
flask = ">=3.0.0,<4.0"
jinja2 = ">=3.1.2,<4.0"

[tool.poetry.group.cuda]
optional = true

[tool.poetry.group.cuda.dependencies]
cupy-cuda12x = {version = ">=12.3.0,<13.0", markers = "platform_machine == 'x86_64'"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# Test runner commands
test-runner = "tests.utils.test_runner:main"

# API servers
api-server = "backend.api.server:main"
api-dev = "backend.api.server:dev"

# Test runners  
test-python = "tests.utils.run_tests:main"
test-python-api = "tests.utils.run_api_tests:main" 
test-python-core = "tests.utils.run_core_tests:main"
test-frontend = "tests.utils.run_frontend_tests:main"
test-all = "tests.utils.run_all_tests:main"

# Type safety checker
check-type-safety = "tools.check_type_safety:main"

[tool.black]
line-length = 88
target-version = ['py312']
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "e2e: marks tests as end-to-end tests using Playwright",
    "cpp: marks tests that test C++ functionality via Python bindings",
    "python: marks tests that test pure Python functionality",
    "mcts: marks tests related to MCTS algorithm",
    "board: marks tests related to board functionality",
    "display: marks tests related to display/visualization",
    "performance: marks performance and stress tests",
    "edge_cases: marks edge case and boundary condition tests",
    "benchmark: marks tests as benchmarks (run with --benchmark-only)",
    "stress: marks stress tests with high resource usage",
    "api: marks tests related to the FastAPI server",
    "websocket: marks tests related to WebSocket functionality",
    "game_manager: marks tests related to game management",
    "models: marks tests related to Pydantic models",
    "endpoints: marks tests for API endpoints",
    "cors: marks tests related to CORS configuration",
    "connection: marks tests for connection handling and recovery"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.mypy]
python_version = "3.12"
# Final optimized configuration for maximum achievable type safety
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
# Core achievements: strong typing where possible
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
# Flexible for ecosystem compatibility
disallow_untyped_calls = false
disallow_untyped_decorators = false
# Key achievement: no explicit Any usage in source code
disallow_any_explicit = true
# Allow implicit Any where needed for ecosystem compatibility
warn_return_any = false
disallow_any_generics = false
disallow_any_decorated = false
disallow_any_unimported = false
disallow_subclassing_any = false
# Focus on our code, be permissive with ecosystem
ignore_missing_imports = false  # We have stubs
follow_imports = "normal"
show_error_context = true
show_column_numbers = true
pretty = true
# Check all Python files in the project - comprehensive coverage
files = ["backend/", "tests/", "tools/"]
# Check corridors as a top-level module  
mypy_path = ["stubs", "backend/python"]
# Exclude backend/python from direct checking since it's handled via stubs
exclude = ["backend/python/"]
# Resolve module path conflicts
explicit_package_bases = true
namespace_packages = true
# Display options
color_output = true
error_summary = true
# Reports disabled for now - can be enabled with lxml installed
# any_exprs_report = "mypy-reports"
# html_report = "mypy-reports/html"
# linecount_report = "mypy-reports/linecount"
# linecoverage_report = "mypy-reports/linecoverage"
# txt_report = "mypy-reports/txt"

# No per-file overrides - we're going for 100% type safety


[tool.poetry.extras]
api = ["fastapi", "uvicorn", "websockets", "python-multipart", "httpx"]

